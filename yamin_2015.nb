constructSickVector[]:=
        (
                scaledViralLoadDead=viralLoadDead[[1;;sickLengthDead]];scaledViralLoadAlive=viralLoadAlive[[1;;sickLengthAlive]];
                contactCalibrationDead=Table[1,{i,1,sickLengthDead}];contactCalibrationDead[[1;;sickLengthDead-stageCutoff]]=contactFirstStageDead;contactCalibrationDead[[sickLengthDead-stageCutoff+1;;sickLengthDead]]=contactSecondStageDead;
                contactCalibrationAlive=Table[1,{i,1,sickLengthAlive}];contactCalibrationAlive[[1;;sickLengthDead-stageCutoff-1]]=contactFirstStageAlive;contactCalibrationAlive[[sickLengthDead-stageCutoff;;sickLengthDead]]=contactSecondStageAlive;
                sickVectorDead=Join[{-1},Table[0,{i,1,incubationDead}],scaledViralLoadDead*contactCalibrationDead];sickVectorAlive=Join[{-1},Table[0,{i,1,incubationAlive}],scaledViralLoadAlive*contactCalibrationAlive];)(*constructSickVector*)
Constructingmatrix
constructMatrix[]:=
        (
                ebolaMatrix=Table[0,{i,1,Length[infectionDate]},{j,1,Length[days]+maxIncubationPeriod+maxSickPeriod+1}];(*Initalizezeromatrix*)
                symptomDateIndex=Table[0,{i,1,Length[infectionDate]}];(*Forlateruse*)For[i=1,i<=Length[infectionDate],i++,index=Position[days,infectionDate[[i]]][[1,1]];
                                                                                                                          If[status[[i]]=="Dead",
                                                                                                                             ebolaMatrix[[i]][[index+2-Length[sickVectorsForMatrix[[i]]];;index+1]]=sickVectorsForMatrix[[i]];symptomDateIndex[[i]]=index+2-sickLengthForMatrix[[i]],ebolaMatrix[[i]][[index-2-incubationAliveForMatrix[[i]];;index-2+sickLengthForMatrix[[i]]]]=sickVectorsForMatrix[[i]];symptomDateIndex[[i]]=index-1;
                                                                                                                          ];
                                                                                     ];
                infectedByDay=Table[0,{i,1,Length[days]}];(*Overallinfectedeveryday*)For[j=1,j<=Length[days],j++,infectedByDay[[j]]=-1*Total[Cases[Transpose[ebolaMatrix][[j]],x_/;x<0]];];
                rMatrixTEMP=ebolaMatrix;(*Zeroizingnegativeelements*)
                For[i=1,i<=Length[ebolaMatrix],i++,
                    For[j=1,j<=Length[ebolaMatrix[[1]]],j++,
                        If[ebolaMatrix[[i,j]]<0,
                           rMatrixTEMP[[i,j]]=0
                        ];
                    ];
                ];
                rMatrix=Table[0,{i,1,Length[infectionDate]},{j,1,Length[days]}];(*Initalizezeromatrix*)For[j=1,j<=Length[days],j++,
                                                                                                           If[Count[Transpose[rMatrixTEMP][[j]],x_/;x>0]==0,
                                                                                                              Return,
                                                                                                              If[coverage!=0&&RandomReal[]<coverage,
                                                                                                                 probSelected=RandomChoice[Join[{(1-propContacts)},propContacts/Total[Transpose[rMatrixTEMP][[j]]]*Transpose[rMatrixTEMP][[j]]]->Join[{-1},Range[Length[Transpose[rMatrixTEMP][[j]]]]],infectedByDay[[j]]],probSelected=RandomChoice[Transpose[rMatrixTEMP][[j]]->Range[Length[Transpose[rMatrixTEMP][[j]]]],infectedByDay[[j]]];
                                                                                                              ];
                                                                                                              For[k=1,k<=Length[probSelected],k++,
                                                                                                                  If[probSelected[[k]]==-1,
                                                                                                                     Return,
                                                                                                                                                              rMatrix[[probSelected[[k]],j]]+=1
                                                                                                                  ];
                                                                                                              ];
                                                                                                           ];
                                                                                                       ];
                cropTop=1;
                cropBottom=Length[ebolaMatrix];(*Countedfromtop*)cropLeft=Min[Table[Position[ebolaMatrix[[row]],-1],{row,1,Length[id]}]];cropRight=Max[Table[Position[ebolaMatrix[[row]],-1],{row,1,Length[id]}]];(*Countedfromleft*)
                rMatrixCrop=rMatrix[[cropTop;;cropBottom,cropLeft;;cropRight]];
                rPerDayAll={};
                rPerDayDead={};
                rPerDayAlive={};
                rDead={};
                rAlive={};
                For[i=cropTop,i<=cropBottom,i++,
                    If[cropLeft<=symptomDateIndex[[i]]&&symptomDateIndex[[i]]+sickLengthForMatrix[[i]]<=cropRight,rPerDayAll=Insert[rPerDayAll,rMatrix[[i,symptomDateIndex[[i]];;symptomDateIndex[[i]]+sickLengthForMatrix[[i]]-1]],-1];
                                                                                                                  If[status[[i]]=="Dead",rPerDayDead=Insert[rPerDayDead,rMatrix[[i,symptomDateIndex[[i]];;symptomDateIndex[[i]]+sickLengthForMatrix[[i]]-1]],-1];rDead=Join[rDead,{Total[rMatrix[[i,symptomDateIndex[[i]];;symptomDateIndex[[i]]+sickLengthForMatrix[[i]]-1]]]}],rPerDayAlive=Insert[rPerDayAlive,rMatrix[[i,symptomDateIndex[[i]];;symptomDateIndex[[i]]+sickLengthForMatrix[[i]]-1]],-1];rAlive=Join[rAlive,{Total[rMatrix[[i,symptomDateIndex[[i]];;symptomDateIndex[[i]]+sickLengthForMatrix[[i]]-1]]]}]
                                                                                                                  ];
                    ];
                ];
                rAll=Join[rAlive,rDead];
                rPerDayAll=Flatten[rPerDayAll,{2}];
                rPerDayDead=Flatten[rPerDayDead,{2}];
                rPerDayAlive=Flatten[rPerDayAlive,{2}];
        )(*constructMatrix*)
Constructing"visual"matrix
constructVisualMatrix[]:=
        (visualEbolaMatrixTEMP=ebolaMatrix[[cropTop;;cropBottom,cropLeft;;cropRight+maxIncubationPeriod+maxSickPeriod]];
         (*indexOfPeopleInfected=Table[0,{day,1,Length[visualEbolaMatrixTEMP[[1]]]}];*)visualEbolaMatrix=Table[0,{day,1,Length[visualEbolaMatrixTEMP[[1]]]}];
         For[day=1,day<=Length[visualEbolaMatrixTEMP[[1]]],day++,indexOfPeopleInfected=Flatten[Position[Transpose[visualEbolaMatrixTEMP][[day]],-1]];visualEbolaMatrix[[day]]=Total[visualEbolaMatrixTEMP[[indexOfPeopleInfected]]];If[visualEbolaMatrix[[day]]==0,visualEbolaMatrix[[day]]=Table[0,{i,1,Length[visualEbolaMatrixTEMP[[1]]]}];
                                                                                                                                                                                                                                    ];];
         cutBottom=Length[visualEbolaMatrix];
         While[visualEbolaMatrix[[cutBottom]]==Table[0,{r,1,Length[visualEbolaMatrix[[cutBottom]]]}],cutBottom-=1
         ];
         cutRight=Length[Transpose[visualEbolaMatrix]];While[Transpose[visualEbolaMatrix][[cutRight]]==Table[0,{r,1,Length[Transpose[visualEbolaMatrix][[cutRight]]]}],cutRight-=1
                                                       ];
         visualEbolaMatrixCropped=visualEbolaMatrix[[1;;cutBottom,1;;cutRight]];plotVisualMatrix=MatrixPlot[visualEbolaMatrixCropped,ImageSize->Large];
         totalVisualInfections=Table[0,{j,1,Length[Transpose[visualEbolaMatrixCropped]]}];totalVisualViralLoad=Table[0,{j,1,Length[Transpose[visualEbolaMatrixCropped]]}];
         For[j=1,j<=Length[Transpose[visualEbolaMatrixCropped]],j++,

                                                      totalVisualInfections[[j]]=Total[Cases[Transpose[visualEbolaMatrixCropped][[j]],x_/;x<0]];totalVisualViralLoad[[j]]=Total[Cases[Transpose[visualEbolaMatrixCropped][[j]],x_/;0<x]];];
         visualLines={totalVisualViralLoad,Table[0,{j,1,Length[Transpose[visualEbolaMatrixCropped]]}],totalVisualInfections};
         plotVisualLines=MatrixPlot[visualLines,ImageSize->Large];)(*constructVisualMatrix*)
Relativeriskcalibration
generateR[viralLoadIN_]:=
        (
                RcoefOUT=0;
                While[RcoefOUT<=1,
                      Switch[viralLoadIN,
                             1,
                             meal=Max[1,Exp[RandomVariate[NormalDistribution[Log[1.2],0.415]]]];
                             RRmeal=Max[meal,Exp[RandomVariate[NormalDistribution[Log[2.2],0.31]]]]/meal;
                             RcoefOUT=RRmeal^(1/((52*Sum[fatalMean[[i]],{i,5,10}]/6+3*Sum[nonFatalMean[[i]],{i,5,10}]/6)/55-((52*Sum[fatalMean[[i]],{i,1,4}]/4+3*Sum[nonFatalMean[[i]],{i,1,4}]/4)/55)));
                             2,
                             talk=Max[1,Exp[RandomVariate[NormalDistribution[Log[0.7],0.525]]]];
                             RRtalk=Max[talk,Exp[RandomVariate[NormalDistribution[Log[3.9],0.58]]]]/talk;
                             RcoefOUT=RRtalk^(1/((52*Sum[fatalMean[[i]],{i,5,10}]/6+3*Sum[nonFatalMean[[i]],{i,5,10}]/6)/55-((52*Sum[fatalMean[[i]],{i,1,4}]/4+3*Sum[nonFatalMean[[i]],{i,1,4}]/4)/55)));
                             3,
                             bed=Max[1,Exp[RandomVariate[NormalDistribution[Log[1.3],0.34]]]];
                             RRbed=Max[bed,Exp[RandomVariate[NormalDistribution[Log[2.2],0.33]]]]/bed;
                             RcoefOUT=RRbed^(1/((52*Sum[fatalMean[[i]],{i,5,10}]/6+3*Sum[nonFatalMean[[i]],{i,5,10}]/6)/55-((52*Sum[fatalMean[[i]],{i,1,4}]/4+3*Sum[nonFatalMean[[i]],{i,1,4}]/4)/55)));
                      ];
                ];
                RcoefOUT
        )(*generateR*)
Analysis
Definingdistributions
define[iterationsIN_]:=
        (
                numOfIterations=iterationsIN;
                maxSickPeriod=14;
                minSickPeriod=5;
                maxIncubationPeriod=15;
                minIncubationPeriod=5;
                incubationDist=Round[RandomVariate[TriangularDistribution[{minIncubationPeriod-0.5,maxIncubationPeriod+0.5},8],{numOfIterations,Length[id]}]];
                sickPeriodDist=Round[RandomVariate[TriangularDistribution[{minSickPeriod-0.5,maxSickPeriod+0.5},8],{numOfIterations,Length[id]}]];

                contactFirstStageDist=Round[RandomVariate[HistogramDistribution[numContacts],{numOfIterations,Length[id]}]];
                contactSecondStageDist=Round[RandomVariate[TruncatedDistribution[{0.5,5.5},HistogramDistribution[numContacts]],{numOfIterations,Length[id]}]];
                stageCutoffDist=Round[RandomVariate[UniformDistribution[{0.5,5.5}],{numOfIterations,Length[id]}]];
                Rcoef=Table[generateR[viralLoad],{i,1,numOfIterations}];
                viralLoadFatalDist=Table[Table[Table[RandomVariate[TruncatedDistribution[{0,Infinity},NormalDistribution[fatalMean[[i]],fatalSD[[i]]]]],{i,1,maxSickPeriod}],{k,1,Length[id]}],{j,1,numOfIterations}];
                viralLoadNonFatalDist=Table[Table[Table[RandomVariate[TruncatedDistribution[{0,Infinity},NormalDistribution[nonFatalMean[[i]],nonFatalSD[[i]]]]],{i,1,maxSickPeriod}],{k,1,Length[id]}],{j,1,numOfIterations}];)(*define*)
Singledrawfromdistributions
singleDraw:=
        (
                Rcoef=generateR[viralLoad];
                define[1];
                coverage=0;
                propContacts=1;
                                                         
                sickVectorsForMatrix=Table[0,{i,1,Length[id]}];
                sickLengthForMatrix=Table[0,{i,1,Length[id]}];
                incubationAliveForMatrix=Table[0,{i,1,Length[id]}];
                iter=1;
                For[person=1,person<=Length[id],person++,
                    incubationDead=incubationDist[[iter,person]];
                    incubationAlive=incubationDead;
                    sickLengthDead=sickPeriodDist[[iter,person]];
                    sickLengthAlive=sickLengthDead;
                    contactFirstStageDead=contactFirstStageDist[[iter,person]];contactSecondStageDead=contactSecondStageDist[[iter,person]];
                    contactFirstStageAlive=contactFirstStageDist[[iter,person]];contactSecondStageAlive=contactFirstStageAlive;
                    stageCutoff=stageCutoffDist[[iter,person]];(*Dayscountedfromend*)
                    viralLoadDead=Rcoef[[iter]]^viralLoadFatalDist[[iter,person]];viralLoadAlive=Rcoef[[iter]]^viralLoadNonFatalDist[[iter,person]];
                    constructSickVector[];
                    If[status[[person]]=="Dead",sickVectorsForMatrix[[person]]=sickVectorDead;sickLengthForMatrix[[person]]=sickLengthDead,sickVectorsForMatrix[[person]]=sickVectorAlive;sickLengthForMatrix[[person]]=sickLengthAlive;incubationAliveForMatrix[[person]]=incubationAlive];
                ];
                constructMatrix[];
                rAllSingle=rAll;
                rDeadSingle=rDead;
                rAliveSingle=rAlive;
        )(*singleDraw*)
Sensitivityanalysis(Iterations,Coverage,Proportionofcontacts)sensAnal[iterationsIN_,coverageIN_,propContactsIN_]:=
        (
                coverage=coverageIN;
                propContacts=propContactsIN;
                define[iterationsIN];
                rAllSensitivity=Table[0,{i,1,numOfIterations}];rDeadSensitivity=Table[0,{i,1,numOfIterations}];rAliveSensitivity=Table[0,{i,1,numOfIterations}];rPerDayAllSensitivity=Table[0,{i,1,numOfIterations}];rPerDayDeadSensitivity=Table[0,{i,1,numOfIterations}];rPerDayAliveSensitivity=Table[0,{i,1,numOfIterations}];personPickedIndex=Table[{},{i,1,numOfIterations}];personPickedRVector=Table[{},{i,1,numOfIterations}];
                For[iter=1,iter<=numOfIterations,iter++,
                    sickVectorsForMatrix=Table[0,{i,1,Length[id]}];sickLengthForMatrix=Table[0,{i,1,Length[id]}];incubationAliveForMatrix=Table[0,{i,1,Length[id]}];
                    tracedCount=1;
                    For[person=1,person<=Length[id],person++,
                        incubationDead=incubationDist[[iter,person]];
                        incubationAlive=incubationDead;
                        sickLengthDead=sickPeriodDist[[iter,person]];
                        sickLengthAlive=sickLengthDead;
                        If[NumberQ[id[[person]]],

                                                                    contactFirstStageDead=numContacts[[tracedCount]];contactSecondStageDead=Round[RandomVariate[TruncatedDistribution[{0.5,Min[(numContacts[[tracedCount]]+0.5),5.5]},HistogramDistribution[numContacts]]]];contactFirstStageAlive=numContacts[[tracedCount]];contactSecondStageAlive=numContacts[[tracedCount]];
                           tracedCount+=1
                         ,
                           contactFirstStageDead=contactFirstStageDist[[iter,person]];contactSecondStageDead=contactSecondStageDist[[iter,person]];contactFirstStageAlive=contactFirstStageDist[[iter,person]];contactSecondStageAlive=contactFirstStageAlive;
                        ];
                        stageCutoff=stageCutoffDist[[iter,person]];(*Dayscountedfromend*)
                        viralLoadDead=Rcoef[[iter]]^viralLoadFatalDist[[iter,person]];
                        viralLoadAlive=Rcoef[[iter]]^viralLoadNonFatalDist[[iter,person]];
                        constructSickVector[];
                        If[status[[person]]=="Dead",
                           sickVectorsForMatrix[[person]]=sickVectorDead;
                           sickLengthForMatrix[[person]]=sickLengthDead,
                           sickVectorsForMatrix[[person]]=sickVectorAlive;
                           sickLengthForMatrix[[person]]=sickLengthAlive;
                           incubationAliveForMatrix[[person]]=incubationAlive
                        ];
                    ];
                    constructMatrix[];
                    rand=RandomInteger[{cropTop,cropBottom}];
                    While[Not[cropLeft<=symptomDateIndex[[rand]]&&(symptomDateIndex[[rand]]+sickLengthAlive-1)<=cropRight],
                          rand=RandomInteger[{cropTop,cropBottom}];
                    ];
                    personPickedIndex[[iter]]=rand;
                    If[status[[rand]]=="Dead",personPickedRVector[[iter]]=rMatrix[[rand,symptomDateIndex[[rand]];;symptomDateIndex[[rand]]+sickLengthDead-1]],personPickedRVector[[iter]]=rMatrix[[rand,symptomDateIndex[[rand]];;symptomDateIndex[[rand]]+sickLengthAlive-1]];
                    ];
                    rAllSensitivity[[iter]]=rAll;
                    rDeadSensitivity[[iter]]=rDead;
                    rAliveSensitivity[[iter]]=rAlive;
                    rPerDayAllSensitivity[[iter]]=rPerDayAll;
                    rPerDayDeadSensitivity[[iter]]=rPerDayDead;
                    rPerDayAliveSensitivity[[iter]]=rPerDayAlive;
                ];
        )(*sensAnal*)
Secondarycasesdistribution(onepersonperiteration)
secondaryCases[]:=
        (
                personPickedDeadRVector={};
                personPickedAliveRVector={};
                For[i=1,i<=Length[personPickedIndex],i++,If[status[[personPickedIndex[[i]]]]=="Dead",personPickedDeadRVector=Insert[personPickedDeadRVector,personPickedRVector[[i]],-1],personPickedAliveRVector=Insert[personPickedAliveRVector,personPickedRVector[[i]],-1]];
                ];
                Print["Overall",Length[personPickedIndex],"picked."];Print["Survived:",Length[personPickedAliveRVector],",Deceased:",Length[personPickedDeadRVector]];
                plotPersonPickedBothRVectorHist=Histogram[{Table[Total[personPickedDeadRVector[[i]]],{i,1,Length[personPickedDeadRVector]}],Table[Total[personPickedAliveRVector[[i]]],{i,1,Length[personPickedAliveRVector]}]},

                                                                                                   {1},"Probability",ChartStyle->{Blue,Red},ChartLegends->Placed[{"Deceased","Survived"},Top],AxesOrigin->{0,0},PlotRange->{{0,15},{0,1}}];plotPersonPickedDeadRVectorHist=Histogram[Table[Total[personPickedDeadRVector[[i]]],{i,1,Length[personPickedDeadRVector]}],{1},"Probability",ChartStyle->Blue,PlotLabel->"Secondarycases-Deceased",AxesOrigin->
                                                                                                                                                                                                                                                                                                                                                                                                                                                         {0,0},PlotRange->{{0,15},{0,1}}];plotPersonPickedAliveRVectorHist=Histogram[Table[Total[personPickedAliveRVector[[i]]],{i,1,Length[personPickedAliveRVector]}],{1},"Probability",ChartStyle->Red,PlotLabel->"Secondarycases-Survived",AxesOrigin->
{0,0},PlotRange->{{0,15},{0,1}}];plotSinglePersonAllHist=Histogram[Table[Total[personPickedRVector[[i]]],{i,1,Length[personPickedRVector]}],{1},"Probability",ChartStyle->Green,PlotLabel->"All",AxesOrigin->{0,0},PlotRange->{{0,15},{0,1}}];
                plotHistogramsSecondary=GraphicsGrid[{{plotPersonPickedBothRVectorHist,plotPersonPickedAliveRVectorHist,plotPersonPickedDeadRVectorHist,plotSinglePersonAllHist}},ImageSize->1200];
        )(*secondaryCases*)
Secondarycasesperday(onepersonperiteration)
secondaryCasesPerDay[]:=
        (personPickedDeadPerDay=Table[0,{i,1,Length[Flatten[personPickedDeadRVector,{2}]]}];confIntDeadPerDay=Table[{0,0},{i,1,Length[Flatten[personPickedDeadRVector,{2}]]}];
         For[i=1,i<=Length[personPickedDeadPerDay],i++,personPickedDeadPerDay[[i]]=Mean[Flatten[personPickedDeadRVector,{2}][[i]]];confIntDeadPerDay[[i,1]]=Sort[Flatten[personPickedDeadRVector,{2}][[i]]][[Round[0.975*Length[Flatten[personPickedDeadRVector,{2}][[i]]]]]];confIntDeadPerDay[[i,2]]=Sort[Flatten[personPickedDeadRVector,{2}][[i]]][[Max[Round[0.025*Length[Flatten[personPickedDeadRVector,{2}][[i]]]],1]]];
         ];
         personPickedAlivePerDay=Table[0,{i,1,Length[Flatten[personPickedAliveRVector,{2}]]}];confIntAlivePerDay=Table[{0,0},{i,1,Length[Flatten[personPickedAliveRVector,{2}]]}];
         For[i=1,i<=Length[personPickedAlivePerDay],i++,personPickedAlivePerDay[[i]]=Mean[Flatten[personPickedAliveRVector,{2}][[i]]];confIntAlivePerDay[[i,1]]=Sort[Flatten[personPickedAliveRVector,{2}][[i]]][[Round[0.975*Length[Flatten[personPickedAliveRVector,{2}][[i]]]]]];confIntAlivePerDay[[i,2]]=Sort[Flatten[personPickedAliveRVector,{2}][[i]]][[Max[Round[0.025*Length[Flatten[personPickedAliveRVector,{2}][[i]]]],1]]];
         ];
         Print["Secondarycasestotal-Deceased:",N[Total[personPickedDeadPerDay]]];Print["Secondarycasestotal-Survived:",N[Total[personPickedAlivePerDay]]];
         errorPerDayDeadHi=Table[confIntDeadPerDay[[i,1]],{i,1,Length[confIntDeadPerDay]}]-personPickedDeadPerDay;errorPerDayDeadLo=Table[confIntDeadPerDay[[i,2]],{i,1,Length[confIntDeadPerDay]}]-personPickedDeadPerDay;
         errorPerDayAliveHi=Table[confIntAlivePerDay[[i,1]],{i,1,Length[confIntAlivePerDay]}]-personPickedAlivePerDay;errorPerDayAliveLo=Table[confIntAlivePerDay[[i,2]],{i,1,Length[confIntAlivePerDay]}]-personPickedAlivePerDay;
         Needs["ErrorBarPlots`"];
         confIntDead=Table[ErrorBar[{errorPerDayDeadLo[[i]],errorPerDayDeadHi[[i]]}],{i,1,Length[personPickedDeadPerDay]}];confIntAlive=Table[ErrorBar[{errorPerDayAliveLo[[i]],errorPerDayAliveHi[[i]]}],{i,1,Length[personPickedAlivePerDay]}];
         plotSecondaryPerDay=GraphicsGrid[{{ErrorListPlot[Table[{{i,personPickedAlivePerDay[[i]]},confIntAlive[[i]]},{i,1,Length[personPickedAlivePerDay]}],PlotLabel->"Secondarycasesperday-Survived",PlotRange->
                                                                                                                                                                                                                 {0,4},PlotStyle->Red,AxesOrigin->{0,0}],ErrorListPlot[Table[{{i,personPickedDeadPerDay[[i]]},confIntDead[[i]]},{i,1,Length[personPickedDeadPerDay]}],PlotLabel->"Secondarycasesperday-Deceased",PlotRange->
                                                                                                                                                                                                                                                                                                                                                                                                                           {0,4},PlotStyle->Blue,AxesOrigin->{0,0}]}},ImageSize->1000];)(*secondaryCasesPerDay*)

                                         Removingfromallpopulation
                                         removeAll[]:=
        (rPerPersonAllSensitivity=Table[Flatten[rPerDayAllSensitivity[[i]],{2}],{i,1,Length[rPerDayAllSensitivity]}];
         rUntilDayAll=Table[Table[0,{i,1,Length[rPerDayAllSensitivity]},{j,1,maxSickPeriod}],{k,1,Length[coverageRemoveScenarios]}];
         For[k=1,k<=Length[coverageRemoveScenarios],k++,For[i=1,i<=Length[rPerPersonAllSensitivity],i++,For[p=1,p<=Length[rPerPersonAllSensitivity[[i]]],p++,rPerPersonAllSensitivity[[i]][[p]]=PadRight[rPerPersonAllSensitivity[[i]][[p]],maxSickPeriod,{0}];
                                                                                                        ];
                                                                                                        For[j=1,j<=maxSickPeriod,j++,tempCopy=rPerPersonAllSensitivity[[i]];For[p=1,p<=Length[rPerPersonAllSensitivity[[i]]],p++,If[RandomReal[]<coverageRemoveScenarios[[k]],tempCopy[[p]][[j;;Length[rPerPersonAllSensitivity[[i]][[p]]]]]=0;If[j==maxSickPeriod,
                                                                                                                                                                                                                                                                                                                                                  tempCopy[[p]][[j]]=0;
                                                                                                                                                                                                                                                                                                                                               ];
                                                                                                                                                                                                                                 ];
                                                                                                                                                                            ];
                                                                                                                                     rUntilDayAll[[k,i,j]]=Total[Mean[tempCopy]];
                                                                                                        ];
                                                        ];
         ];
         plotRemoveAll=GraphicsGrid[{Table[ListLinePlot[Table[Count[Flatten[rUntilDayAll[[k]],{2}][[j]],x_/;x<=1]/Length[Flatten[rUntilDayAll[[k]],{2}][[j]]],{j,1,maxSickPeriod}],PlotRange->{0,1.1},AxesLabel->{"days"},PlotLabel->{"Removingfromall,coverage:",coverageRemoveScenarios[[k]]}],{k,1,Length[coverageRemoveScenarios]}]},ImageSize->1200];)(*removeAll*)
Removingdeceasedfrompopulation
removeDead[]:=
        (rPerPersonDeadSensitivity=Table[Flatten[rPerDayDeadSensitivity[[i]],{2}],{i,1,Length[rPerDayDeadSensitivity]}];rPerPersonAliveSensitivity=Table[Flatten[rPerDayAliveSensitivity[[i]],{2}],{i,1,Length[rPerDayAliveSensitivity]}];
         rUntilDayDead=Table[Table[0,{i,1,Length[rPerDayDeadSensitivity]},{j,1,maxSickPeriod}],{k,1,Length[coverageRemoveScenarios]}];
         For[k=1,k<=Length[coverageRemoveScenarios],k++,For[i=1,i<=Length[rPerPersonDeadSensitivity],i++,For[p=1,p<=Length[rPerPersonDeadSensitivity[[i]]],p++,rPerPersonDeadSensitivity[[i]][[p]]=PadRight[rPerPersonDeadSensitivity[[i]][[p]],maxSickPeriod,{0}];
                                                                                                         ];
                                                                                                         For[p=1,p<=Length[rPerPersonAliveSensitivity[[i]]],p++,rPerPersonAliveSensitivity[[i]][[p]]=PadRight[rPerPersonAliveSensitivity[[i]][[p]],maxSickPeriod,{0}];
                                                                                                         ];
                                                                                                         For[j=1,j<=maxSickPeriod,j++,
                                                                                                             tempCopy=rPerPersonDeadSensitivity[[i]];For[p=1,p<=Length[rPerPersonDeadSensitivity[[i]]],p++,If[RandomReal[]<coverageRemoveScenarios[[k]],tempCopy[[p]][[j;;Length[rPerPersonDeadSensitivity[[i]][[p]]]]]=0;
                                                                                                                                                                                                                                                        If[j==maxSickPeriod,
                                                                                                                                                                                                                                                           tempCopy[[p]][[j]]=0;
                                                                                                                                                                                                                                                        ];
                                                                                                                                                                                                           ];
                                                                                                                                                     ];
                                                                                                             tempSum=Length[tempCopy]+Length[rPerPersonAliveSensitivity[[i]]];rUntilDayDead[[k,i,j]]=Total[Mean[tempCopy]]*Length[tempCopy]/tempSum+Total[Mean[rPerPersonAliveSensitivity[[i]]]]*Length[rPerPersonAliveSensitivity[[i]]]/tempSum;
                                                                                                         ];
                                                        ];
         ];
         plotRemoveDead=GraphicsGrid[{Table[ListLinePlot[Table[Count[Flatten[rUntilDayDead[[k]],{2}][[j]],x_/;x<=1]/Length[Flatten[rUntilDayDead[[k]],{2}][[j]]],{j,1,maxSickPeriod}],

                                                                                                  PlotRange->{0,1.1},AxesLabel->{"days"},PlotLabel->{"Removingfromdeceased,coverage:",coverageRemoveScenarios[[k]]}],{k,1,Length[coverageRemoveScenarios]}]},ImageSize->1200];)(*removeDead*)
Reducingcontacts(Iterationsperscenario)
reduceContacts[iterUsed_]:=
        (probEradicate[]:=Count[Table[Mean[rAllSensitivity[[iii]]],{iii,1,Length[rAllSensitivity]}],x_/;x<=1]/Length[rAllSensitivity];
         reduceContactsResults=Table[Table[0,{j,1,Length[contactScenarios]}],{i,1,Length[coverageContactsScenarios]}];
         For[ii=1,ii<=Length[coverageContactsScenarios],ii++,For[jj=1,jj<=Length[contactScenarios],jj++,sensAnal[iterUsed,coverageContactsScenarios[[ii]],contactScenarios[[jj]]];reduceContactsResults[[ii,jj]]=probEradicate[];
                                                             ];];
         plotReduceContacts=Table[ListLinePlot[Transpose[{contactScenarios,reduceContactsResults[[ii]]}],PlotRange->{0,1.1},AxesOrigin->{0,0},ImageSize->Medium,AxesLabel->{"%contacts"},PlotLabel->{"Reducingcontacts,coverage:",coverageContactsScenarios[[ii]]}],{ii,1,Length[coverageContactsScenarios]}];)(*reduceContacts*)
